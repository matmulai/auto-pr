name: Auto PR
on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: ["**"]
permissions:
  contents: write    
  pull-requests: write
jobs:
  auto-pr:
    runs-on: ubuntu-latest
    # Only run if the triggering commit contained "auto-pr" in the message and the workflow failed
    if: ${{ github.event.workflow_run.conclusion == 'failure' && contains(github.event.workflow_run.head_commit.message, 'auto-pr') }}
    env:
      MAX_ATTEMPTS: 3  # Default value for maximum fix attempts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0  # Get all files and history
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Download workflow artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: Test
          run_id: ${{ github.event.workflow_run.id }}
          path: artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la artifacts/ || echo "No artifacts directory found"
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install requests openai pytest pylint
          
      - name: Set script permissions
        run: |
          chmod +x .github/scripts/*.py || echo "Failed to set script permissions"
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
      - name: Create fix branch
        run: |
          BRANCH_NAME="auto-pr/fix-${GITHUB_SHA::8}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
      - name: Create empty files if needed
        run: |
          # Just make sure directories exist
          mkdir -p calculator tests .github/scripts
          
          # Create empty files if they don't exist
          touch calculator/__init__.py
          touch tests/__init__.py
          
      - name: Run tests to capture errors
        id: test-run
        run: |
          # Run tests and capture output
          python -m pytest || echo "Tests failed as expected"
          
      - name: Fix code with OpenAI
        id: fix-code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Run the fix code script
          python .github/scripts/fix_code.py
          echo "fix_complete=true" >> $GITHUB_OUTPUT
          
      - name: Commit changes
        run: |
          git add -A
          git commit -m "fix: Auto-fixed issues using OpenAI" || echo "No changes to commit"
          
      - name: Push branch
        run: |
          git push origin ${{ env.BRANCH_NAME }} || echo "Failed to push branch"
          
      - name: Create Pull Request
        run: |
          PR_URL=$(gh pr create \
            --title "Auto-fix: Resolved issues from commit ${{ github.event.workflow_run.head_sha }}" \
            --body "This PR was automatically created by the Auto-PR GitHub Action. Check the changes to see if they resolve the test failures." \
            --base ${{ github.event.workflow_run.head_ref }} \
            --head ${{ env.BRANCH_NAME }})
          echo "Created PR: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}